// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  email     String    @unique
  hash      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  APIKeys   APIKey[]
  Requests  Request[]
  roleId    String
  Role      UserRole  @relation(fields: [roleId], references: [id])
}

model UserRole {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  roleName String @unique
  Users    User[]
}

model APIKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  active    Boolean  @default(true)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  ipAddress String
  timestamp DateTime @default(now())
  response  Json
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeolocationData {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  ipAddress     String   @unique
  country       String?
  city          String?
  latitude      Float?
  longitude     Float?
  ISP           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  IPv4Address   IPv4?    @relation(fields: [ipv4AddressId], references: [id])
  ipv4AddressId String?  @unique
  IPv6Address   IPv6?    @relation(fields: [ipv6AddressId], references: [id])
  ipv6AddressId String?  @unique
}

model IPv4 {
  id              String           @id @default(dbgenerated("gen_random_uuid()"))
  address         String           @unique
  GeolocationData GeolocationData?
}

model IPv6 {
  id              String           @id @default(dbgenerated("gen_random_uuid()"))
  address         String           @unique
  GeolocationData GeolocationData?
}

model RateLimit {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  limit     Int
  windowSec Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

